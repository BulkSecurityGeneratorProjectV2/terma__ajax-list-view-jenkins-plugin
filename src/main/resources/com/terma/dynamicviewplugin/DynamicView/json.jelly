<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:i="jelly:fmt">

<st:documentation>
    Renders a list of jobs and their key information.

    <st:attribute name="columnExtensions" type="Collection&lt;hudson.views.ListViewColumn>">
        List view columns to render. If omitted, the default ones from ListView.getDefaultColumns() are used.
    </st:attribute>

    <st:attribute name="itemGroup" use="optional" type="hudson.model.ItemGroup">
        The containing group, for purposes of name calculation.
    </st:attribute>

</st:documentation>

<t:setIconSize/>

<j:if test="${columnExtensions==null}">
    <j:invokeStatic var="columnExtensions" className="hudson.model.ListView" method="getDefaultColumns"/>
</j:if>

[
    <j:forEach var="job" items="${it.items}" indexVar="jobIndex">

    <j:if test="${ jobIndex > 0 }">
        ,
    </j:if>

    [
        <j:forEach var="col" items="${columnExtensions}" indexVar="index">

            <j:if test="${ index > 0 }">
                ,
            </j:if>

            {

                "name": "${col.class.name}",
                "title": "${col.descriptor.displayName}",

            <j:choose>

                <j:when test="${ col.class.name == 'hudson.views.StatusColumn' }">
                        "name": "${col.class.name}",
                        "img": "${job.iconColor.getImageOf('32x32')}",
                        "description": "${job.iconColor.description}"
                </j:when>

                <j:when test="${ col.class.name == 'hudson.views.WeatherColumn' }">

                        <!-- todo fix hardcoded jenkins prefix -->

                        "name": "${col.class.name}",
                        "img": "/jenkins/${job.buildHealth.getIconUrl('32x32')}",
                        "description": "${job.buildHealth.score}"
                </j:when>

                <j:when test="${ col.class.name == 'hudson.views.JobColumn' }">
                        "name": "${col.class.name}",
                        "h": "${h}",

                        <j:new className="hudson.Functions" var="h"/>
                        "value": "${h.getRelativeDisplayNameFrom(job, itemGroup)}",

                        "link": "${jobBaseUrl}${job.shortUrl}"
                </j:when>

                <j:when test="${ col.class.name == 'hudson.views.LastSuccessColumn' }">
                        "name": "${col.class.name}",

                        <j:set var="lsBuild" value="${job.lastSuccessfulBuild}"/>
                        <j:choose>
                            <j:when test="${lsBuild!=null}">
                                "value": "${lsBuild.timestampString}"
                            </j:when>
                            <j:otherwise>
                                "value": "N/A"
                            </j:otherwise>
                        </j:choose>
                </j:when>

                <j:when test="${ col.class.name == 'hudson.views.LastFailureColumn' }">
                        "name": "${col.class.name}",

                        <j:set var="lsBuild" value="${job.lastFailedBuild}"/>
                        <j:choose>
                            <j:when test="${lsBuild!=null}">
                                "value": "${lsBuild.timestampString}"
                            </j:when>
                            <j:otherwise>
                                "value": "N/A"
                            </j:otherwise>
                        </j:choose>
                </j:when>

                <j:when test="${ col.class.name == 'hudson.views.LastDurationColumn' }">
                        "name": "${col.class.name}",

                        <j:set var="lBuild" value="${job.lastSuccessfulBuild ?: job.lastFailedBuild}"/>

                        <j:choose>
                            <j:when test="${lBuild!=null}">
                                "value": "${lBuild.durationString}"
                            </j:when>
                            <j:otherwise>
                                "value": "N/A"
                            </j:otherwise>
                        </j:choose>
                </j:when>

                <j:otherwise>
                        "unknown": true
                </j:otherwise>

            </j:choose>

            }

        </j:forEach>
    ]
    </j:forEach>
]

</j:jelly>
